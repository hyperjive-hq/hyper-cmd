"""MCP initialization command for setting up .mcp.json configuration."""

import json
import os
from pathlib import Path
from typing import Dict, Any, Optional, List

from .base import BaseCommand


class MCPConfigGenerator:
    """Generates MCP configuration for Hyper CLI integration."""
    
    # MCP schema URL for validation
    MCP_SCHEMA_URL = "https://raw.githubusercontent.com/modelcontextprotocol/specification/main/schema/mcp_config.schema.json"
    
    @classmethod
    def generate_config(cls) -> Dict[str, Any]:
        """Generate the standard MCP configuration for Hyper CLI."""
        return {
            "mcpServers": {
                "hyper-core": {
                    "command": "hyper-mcp",
                    "args": [],
                    "env": {},
                    "description": "Hyper CLI commands via MCP for AI integration"
                }
            },
            "$schema": cls.MCP_SCHEMA_URL,
            "version": "1.0",
            "description": "MCP configuration for Hyper CLI integration - auto-generated by hyper mcp-init"
        }
    
    @classmethod
    def write_config(cls, config_file: Path, config: Dict[str, Any]) -> None:
        """Write MCP configuration to file with proper formatting."""
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
            f.write('\n')  # Add trailing newline


class MCPToolDetector:
    """Detects MCP-compatible tools and existing configurations."""
    
    @classmethod
    def detect_tools(cls) -> List[str]:
        """Detect common MCP-compatible tools in the environment."""
        tools_found = []
        
        # Check for Claude Code environment variable
        if os.environ.get("CLAUDE_CODE"):
            tools_found.append("Claude Code")
        
        # Check for common MCP config locations
        existing_configs = cls._find_existing_configs()
        if existing_configs:
            tools_found.append(f"Existing MCP configs: {len(existing_configs)}")
        
        return tools_found
    
    @classmethod
    def _find_existing_configs(cls) -> List[Path]:
        """Find existing MCP configuration files."""
        home = Path.home()
        common_configs = [
            home / ".config" / "claude-code" / "mcp.json",
            home / ".claude" / "mcp.json", 
            Path.cwd() / "mcp.json",
            Path.cwd() / ".mcp.json",
        ]
        
        return [p for p in common_configs if p.exists()]


class McpInitCommand(BaseCommand):
    """Initialize MCP configuration for Hyper CLI integration.

    This command creates or updates .mcp.json file with the configuration
    needed to connect the Hyper CLI MCP server to AI tools like Claude Code.
    """

    def __init__(self, container=None):
        """Initialize the command."""
        super().__init__(container)
        self.config_generator = MCPConfigGenerator()
        self.tool_detector = MCPToolDetector()

    @property
    def name(self) -> str:
        return "mcp-init"

    @property
    def description(self) -> str:
        return "Initialize MCP configuration for Hyper CLI integration"

    @property
    def help_text(self) -> str:
        return """
        Usage: hyper mcp-init [--force] [--config-path PATH]

        Initialize MCP (Model Context Protocol) configuration for Hyper CLI integration.

        This command creates or updates a .mcp.json file that configures AI tools
        (like Claude Code) to connect to the Hyper CLI MCP server, enabling AI
        agents to execute Hyper commands.

        Options:
            --force          Overwrite existing .mcp.json file without confirmation
            --config-path    Path to save .mcp.json (default: current directory)

        Examples:
            hyper mcp-init                    # Create .mcp.json in current directory
            hyper mcp-init --force            # Overwrite existing config
            hyper mcp-init --config-path ~/   # Save to home directory

        After running this command:
        1. The .mcp.json file will be created with Hyper CLI server configuration
        2. AI tools can connect to the Hyper CLI via MCP protocol
        3. AI agents will have access to all non-interactive Hyper commands
        """

    def execute(self, force: bool = False, config_path: Optional[str] = None) -> int:
        """Execute the mcp-init command.

        Args:
            force: Skip confirmation and overwrite existing files
            config_path: Path where to save .mcp.json file

        Returns:
            Exit code (0 for success, non-zero for failure)
        """
        try:
            # Determine and validate config file location
            config_file = self._determine_config_file(config_path)
            if config_file is None:
                return 1

            # Check for existing file and get user confirmation if needed
            if not self._handle_existing_file(config_file, force):
                return 1

            # Generate and preview configuration
            config = self.config_generator.generate_config()
            self._show_config_preview(config, config_file)

            # Get final confirmation if not using force
            if not force and not self._confirm_proceed():
                self.print_info("MCP initialization cancelled.")
                return 1

            # Write configuration file
            self._write_config_file(config_file, config)

            # Show success message and next steps
            self._show_success_message(config_file)

            return 0

        except Exception as e:
            self.print_error(f"Failed to initialize MCP configuration: {e}")
            return 1

    def _determine_config_file(self, config_path: Optional[str]) -> Optional[Path]:
        """Determine and validate the config file location."""
        if config_path:
            config_dir = Path(config_path).resolve()
        else:
            config_dir = Path.cwd()

        # Validate directory
        if not config_dir.exists():
            self.print_error(f"Directory does not exist: {config_dir}")
            return None

        if not config_dir.is_dir():
            self.print_error(f"Path is not a directory: {config_dir}")
            return None

        return config_dir / ".mcp.json"

    def _handle_existing_file(self, config_file: Path, force: bool) -> bool:
        """Handle existing configuration file."""
        if not config_file.exists():
            return True

        if force:
            return True

        self.print_warning(f".mcp.json already exists at {config_file}")
        return self._confirm_overwrite()

    def _show_config_preview(self, config: Dict[str, Any], config_file: Path) -> None:
        """Show a preview of the configuration that will be created."""
        self.print_info(f"Creating MCP configuration at: {config_file}")
        self.console.print("\n[bold]Configuration preview:[/bold]")
        
        # Show the important parts of the config
        hyper_config = config["mcpServers"]["hyper-core"]
        self.console.print(f"  📋 Server name: [cyan]hyper-core[/cyan]")
        self.console.print(f"  🔧 Command: [green]{hyper_config['command']}[/green]")
        self.console.print(f"  📝 Description: {hyper_config['description']}")
        
        # Show detected tools if any
        detected_tools = self.tool_detector.detect_tools()
        if detected_tools:
            self.console.print(f"\n[bold]Detected MCP tools:[/bold]")
            for tool in detected_tools:
                self.console.print(f"  🔍 {tool}")
        
        self.console.print("")

    def _write_config_file(self, config_file: Path, config: Dict[str, Any]) -> None:
        """Write the configuration file."""
        try:
            self.config_generator.write_config(config_file, config)
        except (OSError, PermissionError) as e:
            raise RuntimeError(f"Failed to write config file: {e}")

    def _show_success_message(self, config_file: Path) -> None:
        """Show success message and next steps."""
        self.print_success("✓ MCP configuration created successfully!")
        self._show_next_steps(config_file)

    def _show_next_steps(self, config_file: Path) -> None:
        """Show instructions for what to do after creating the config."""
        self.console.print("\n[bold green]🎉 MCP Configuration Ready![/bold green]")
        self.console.print("\n[bold]Next steps:[/bold]")
        
        self._show_installation_step()
        self._show_configuration_step(config_file)
        self._show_testing_step()
        self._show_available_commands()
        self._show_tips()

    def _show_installation_step(self) -> None:
        """Show installation step."""
        self.console.print("1. [bold]Install Hyper CLI[/bold] (if not already installed):")
        self.console.print("   [cyan]pip install -e .[/cyan]")

    def _show_configuration_step(self, config_file: Path) -> None:
        """Show configuration step."""
        self.console.print("\n2. [bold]Configure your AI tool[/bold] to use this MCP server:")
        self.console.print(f"   • Point it to: [green]{config_file}[/green]")
        self.console.print("   • Or copy the configuration to your AI tool's MCP config")

    def _show_testing_step(self) -> None:
        """Show testing step.""" 
        self.console.print("\n3. [bold]Test the connection[/bold]:")
        self.console.print("   • Start your AI tool with MCP support")
        self.console.print("   • Verify it can access Hyper commands")

    def _show_available_commands(self) -> None:
        """Show available commands."""
        self.console.print("\n4. [bold]Available Hyper commands via MCP:[/bold]")
        
        # List key commands
        key_commands = [
            ("hyper_init", "Initialize Hyper projects"),
            ("hyper_mcp-init", "Generate MCP configuration"),
            ("hyper_hello", "Example plugin command"),
            ("hyper_test", "Run project tests"),
            ("hyper_testinfo", "Test environment info"),
        ]
        
        for cmd_name, description in key_commands:
            self.console.print(f"   • [cyan]{cmd_name}[/cyan] - {description}")
        
        self.console.print("   • Plus any additional plugin commands")

    def _show_tips(self) -> None:
        """Show helpful tips."""
        self.console.print(f"\n[dim]💡 Tip: Use 'hyper --help' to see all available commands[/dim]")
        self.console.print(f"[dim]📖 Documentation: See MCP_README.md for detailed usage[/dim]")

    def _confirm_overwrite(self) -> bool:
        """Ask user to confirm overwriting existing .mcp.json file."""
        try:
            response = input("Do you want to overwrite the existing .mcp.json file? [y/N]: ")
            return response.lower().startswith("y")
        except (EOFError, KeyboardInterrupt):
            return False

    def _confirm_proceed(self) -> bool:
        """Ask user to confirm proceeding with MCP initialization."""
        try:
            response = input("Proceed with MCP configuration creation? [Y/n]: ")
            return not response.lower().startswith("n")
        except (EOFError, KeyboardInterrupt):
            return False